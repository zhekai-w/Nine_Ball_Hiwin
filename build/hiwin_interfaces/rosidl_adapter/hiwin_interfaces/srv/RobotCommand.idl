// generated from rosidl_adapter/resource/srv.idl.em
// with input from hiwin_interfaces/srv/RobotCommand.srv
// generated code does not contain a copyright notice

#include "geometry_msgs/msg/Twist.idl"

module hiwin_interfaces {
  module srv {
    typedef double double__6[6];
    module RobotCommand_Request_Constants {
      @verbatim (language="comment", text=
        "mode")
      const uint8 EXCITE = 1;
      const uint8 PTP = 2;
      const uint8 LINE = 3;
      const uint8 CIRC = 4;
      const uint8 DIGITAL_OUTPUT = 5;
      const uint8 HOME = 6;
      const uint8 JOG = 7;
      const uint8 CHECK_JOINT = 8;
      const uint8 CHECK_POSE = 9;
      const uint8 CLOSE = 10;
      const uint8 WAITING = 11;
      const uint8 READ_DI = 12;
      const uint8 SET_BASE = 13;
      const uint8 SET_TOOL = 14;
      const uint8 MOTION_STOP = 15;
      @verbatim (language="comment", text=
        "cmd type")
      const uint8 JOINTS_CMD = 0;
      const uint8 POSE_CMD = 1;
      @verbatim (language="comment", text=
        "digital_output_cmd")
      const uint8 DIGITAL_ON = 1;
      const uint8 DIGITAL_OFF = 0;
    };
    @verbatim (language="comment", text=
      "request")
    struct RobotCommand_Request {
      uint8 do_timer;

      boolean holding;

      uint8 cmd_mode;

      uint8 cmd_type;

      uint8 velocity;

      uint8 acceleration;

      uint8 tool;

      uint8 base;

      uint8 base_num;

      uint8 tool_num;

      uint8 digital_input_pin;

      uint8 digital_output_pin;

      uint8 digital_output_cmd;

      @verbatim (language="comment", text=
        "for POSE_CMD")
      geometry_msgs::msg::Twist pose;

      @verbatim (language="comment", text=
        "for JOINTS_CMD")
      double__6 joints;

      sequence<double> circ_s;

      sequence<double> circ_end;

      @verbatim (language="comment", text=
        "for JOG mode")
      int8 jog_joint;

      int8 jog_dir;
    };
    module RobotCommand_Response_Constants {
      const uint8 IDLE = 1;
      const uint8 RUNNING = 2;
      const uint8 HOLD = 3;
      const uint8 DELAY = 4;
    };
    struct RobotCommand_Response {
      uint8 arm_state;

      uint8 digital_state;

      sequence<double> current_position;
    };
  };
};
